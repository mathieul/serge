var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mergeFragments = F2(
	function (fragmentsA, fragmentsB) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			fragmentsA,
			A2(
				_elm_lang$core$List$filter,
				function (fragment) {
					return !A2(
						_elm_lang$core$List$any,
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							})(fragment),
						fragmentsA);
				},
				fragmentsB));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$equalVariableDefinitionAST = F2(
	function (varA, varB) {
		return _elm_lang$core$Native_Utils.eq(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$toDefinitionAST(varA),
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$toDefinitionAST(varB));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mergeVariables = F2(
	function (varsA, varsB) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			varsA,
			A2(
				_elm_lang$core$List$filter,
				function ($var) {
					return !A2(
						_elm_lang$core$List$any,
						_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$equalVariableDefinitionAST($var),
						varsA);
				},
				varsB));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$documentVariables = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1._0.operation;
	var spec = _p2._0.spec;
	var _p3 = spec;
	var vars = _p3._2;
	return vars;
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$documentString = function (_p4) {
	var _p5 = _p4;
	return _p5._0.serialized;
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$documentAST = function (_p6) {
	var _p7 = _p6;
	return _p7._0.ast;
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$operationTypeAST = function (operationType) {
	var _p8 = operationType;
	if (_p8.ctor === 'QueryOperationType') {
		return _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$Query;
	} else {
		return _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$Mutation;
	}
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$directiveAST = function (_p9) {
	var _p10 = _p9;
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$Directive(
		{
			name: _p10._0,
			$arguments: A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$mapSecond(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$getAST),
				_p10._1)
		});
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$variableDefinitionsAST = function (_p11) {
	var _p12 = _p11;
	return A2(_elm_lang$core$List$map, _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$toDefinitionAST, _p12._2);
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$emptySelectionSet = _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$SelectionSet(
	{ctor: '[]'});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionSetFromSourceType = function (sourceType) {
	var _p13 = sourceType;
	if (_p13.ctor === 'SpecifiedType') {
		return _p13._0.selectionSet;
	} else {
		return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$emptySelectionSet;
	}
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionSetFromSpec = function (_p14) {
	var _p15 = _p14;
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionSetFromSourceType(_p15._0);
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$operationAST = function (_p16) {
	var _p17 = _p16;
	var _p18 = _p17._0.spec;
	return {
		operationType: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$operationTypeAST(_p17._0.operationType),
		name: _p17._0.name,
		variableDefinitions: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$variableDefinitionsAST(_p18),
		directives: A2(_elm_lang$core$List$map, _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$directiveAST, _p17._0.directives),
		selectionSet: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionSetFromSpec(_p18)
	};
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$fragmentAST = function (_p19) {
	var _p20 = _p19;
	return {
		name: _p20._0.name,
		typeCondition: _p20._0.typeCondition,
		directives: A2(_elm_lang$core$List$map, _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$directiveAST, _p20._0.directives),
		selectionSet: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionSetFromSpec(_p20._0.spec)
	};
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$specDecoder = function (_p21) {
	var _p22 = _p21;
	return _p22._1(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionSetFromSourceType(_p22._0));
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$documentResponseDecoder = function (_p23) {
	var _p24 = _p23;
	var _p25 = _p24._0.operation;
	var spec = _p25._0.spec;
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$specDecoder(spec);
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mergeSelectionSets = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$SelectionSet(
			A2(_elm_lang$core$Basics_ops['++'], _p28._0, _p29._0));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$decoderFromEnumLabel = F2(
	function (fallbackDecoder, labelledValues) {
		var valueFromLabel = A2(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$Dict$get,
			_elm_lang$core$Dict$fromList(labelledValues));
		var decoder = function (enumString) {
			var _p30 = valueFromLabel(enumString);
			if (_p30.ctor === 'Just') {
				return _elm_lang$core$Json_Decode$succeed(_p30._0);
			} else {
				return fallbackDecoder(enumString);
			}
		};
		return decoder;
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$varsFromArguments = function ($arguments) {
	return A2(
		_elm_lang$core$List$concatMap,
		function (_p31) {
			return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$getVariables(
				_elm_lang$core$Tuple$second(_p31));
		},
		$arguments);
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$varsFromDirectives = _elm_lang$core$List$concatMap(
	function (_p32) {
		return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$varsFromArguments(
			_elm_lang$core$Tuple$second(_p32));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$fragmentVariables = function (_p33) {
	var _p34 = _p33;
	var _p35 = _p34._0.spec;
	var specVariables = _p35._2;
	var directiveVariables = _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$varsFromDirectives(_p34._0.directives);
	return A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mergeVariables, directiveVariables, specVariables);
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$updateInfoWithDirectives = F2(
	function (directives, info) {
		return _elm_lang$core$Native_Utils.update(
			info,
			{
				directives: A2(_elm_lang$core$List$map, _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$directiveAST, directives)
			});
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionASTWithDirectives = F2(
	function (directives, selection) {
		var _p36 = selection;
		switch (_p36.ctor) {
			case 'Field':
				return _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$Field(
					A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$updateInfoWithDirectives, directives, _p36._0));
			case 'FragmentSpread':
				return _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$FragmentSpread(
					A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$updateInfoWithDirectives, directives, _p36._0));
			default:
				return _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$InlineFragment(
					A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$updateInfoWithDirectives, directives, _p36._0));
		}
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$onType = _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$TypeCondition;
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$fragmentDefinitionsFromOperation = function (_p37) {
	var _p38 = _p37;
	var _p39 = _p38._0.spec;
	var fragments = _p39._3;
	return fragments;
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$responseDataDecoder = function (_p40) {
	var _p41 = _p40;
	return _p41._0.responseDataDecoder;
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$variableValuesToJson = function (kvPairs) {
	return _elm_lang$core$List$isEmpty(kvPairs) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
		_elm_lang$core$Json_Encode$object(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$mapSecond(_jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST_Value_Json_Encode$encode),
				kvPairs)));
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$jsonVariableValues = function (_p42) {
	var _p43 = _p42;
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$variableValuesToJson(_p43._0.variableValues);
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$requestBody = function (_p44) {
	var _p45 = _p44;
	return _p45._0.documentString;
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SpecifiedTypeInfo = F4(
	function (a, b, c, d) {
		return {nullability: a, coreType: b, join: c, selectionSet: d};
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Request = function (a) {
	return {ctor: 'Request', _0: a};
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$request = F2(
	function (vars, _p46) {
		var _p47 = _p46;
		var _p48 = _p47;
		return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Request(
			{
				documentAST: _p47._0.ast,
				documentString: _p47._0.serialized,
				variableValues: A2(
					_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$extractValuesFrom,
					vars,
					_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$documentVariables(_p48)),
				responseDataDecoder: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$documentResponseDecoder(_p48)
			});
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Document = function (a) {
	return {ctor: 'Document', _0: a};
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$document = function (operation) {
	var fragmentDefinitions = _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$fragmentDefinitionsFromOperation(operation);
	var ast = _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$Document(
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$List$map, _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$FragmentDefinition, fragmentDefinitions),
			{
				ctor: '::',
				_0: _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$OperationDefinition(
					_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$operationAST(operation)),
				_1: {ctor: '[]'}
			}));
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Document(
		{
			operation: operation,
			ast: ast,
			serialized: _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST_Serialize$serializeDocument(ast)
		});
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Operation = function (a) {
	return {ctor: 'Operation', _0: a};
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$MutationOperationType = {ctor: 'MutationOperationType'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mutationOperationType = _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$MutationOperationType;
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mutationDocument = function (spec) {
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$document(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Operation(
			{
				operationType: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mutationOperationType,
				name: _elm_lang$core$Maybe$Nothing,
				directives: {ctor: '[]'},
				spec: spec
			}));
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$QueryOperationType = {ctor: 'QueryOperationType'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$queryOperationType = _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$QueryOperationType;
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$queryDocument = function (spec) {
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$document(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Operation(
			{
				operationType: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$queryOperationType,
				name: _elm_lang$core$Maybe$Nothing,
				directives: {ctor: '[]'},
				spec: spec
			}));
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Query = {ctor: 'Query'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Mutation = {ctor: 'Mutation'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Fragment = function (a) {
	return {ctor: 'Fragment', _0: a};
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$fragment = F3(
	function (name, typeCondition, spec) {
		return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Fragment(
			{
				name: name,
				typeCondition: typeCondition,
				directives: {ctor: '[]'},
				spec: spec
			});
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec = F4(
	function (a, b, c, d) {
		return {ctor: 'ValueSpec', _0: a, _1: b, _2: c, _3: d};
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$map = F2(
	function (f, _p49) {
		var _p50 = _p49;
		return A4(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec,
			_p50._0,
			function (_p51) {
				return A2(
					_elm_lang$core$Json_Decode$map,
					f,
					_p50._1(_p51));
			},
			_p50._2,
			_p50._3);
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SelectionSpec = F4(
	function (a, b, c, d) {
		return {ctor: 'SelectionSpec', _0: a, _1: b, _2: c, _3: d};
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field = F3(
	function (name, $arguments, _p52) {
		var _p53 = _p52;
		var vars = A2(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mergeVariables,
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$varsFromArguments($arguments),
			_p53._2);
		var astFieldInfo = {
			alias: _elm_lang$core$Maybe$Nothing,
			name: name,
			$arguments: A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$mapSecond(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$getAST),
				$arguments),
			directives: {ctor: '[]'},
			selectionSet: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionSetFromSourceType(_p53._0)
		};
		var decoder = function (selectionSet) {
			var fieldInSelectionSet = astFieldInfo;
			var responseKey = _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST_Util$responseKey(fieldInSelectionSet);
			return A2(
				_elm_lang$core$Json_Decode$field,
				responseKey,
				_p53._1(fieldInSelectionSet.selectionSet));
		};
		return A4(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SelectionSpec,
			_jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$Field(astFieldInfo),
			decoder,
			vars,
			_p53._3);
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$withDirectives = F2(
	function (directives, _p54) {
		var _p55 = _p54;
		return A4(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SelectionSpec,
			A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionASTWithDirectives, directives, _p55._0),
			function (_p56) {
				return _elm_lang$core$Json_Decode$maybe(
					_p55._1(_p56));
			},
			A2(
				_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mergeVariables,
				_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$varsFromDirectives(directives),
				_p55._2),
			_p55._3);
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$assume = function (_p57) {
	var _p58 = _p57;
	return A4(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SelectionSpec,
		_p58._0,
		function (_p59) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (maybeValue) {
					var _p60 = maybeValue;
					if (_p60.ctor === 'Just') {
						return _elm_lang$core$Json_Decode$succeed(_p60._0);
					} else {
						return _elm_lang$core$Json_Decode$fail('Expected a selection to be present in the response with `assume`, but found `Nothing`');
					}
				},
				_p58._1(_p59));
		},
		_p58._2,
		_p58._3);
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$aliasAs = F2(
	function (responseKey, _p61) {
		var _p62 = _p61;
		var _p63 = _p62._0;
		if (_p63.ctor === 'Field') {
			return A4(
				_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SelectionSpec,
				_jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$Field(
					_elm_lang$core$Native_Utils.update(
						_p63._0,
						{
							alias: _elm_lang$core$Maybe$Just(responseKey)
						})),
				_p62._1,
				_p62._2,
				_p62._3);
		} else {
			return _p62;
		}
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$fragmentSpread = function (_p64) {
	var _p65 = _p64;
	var _p68 = _p65;
	var _p66 = _p65._0.spec;
	var decoder = _p66._1;
	var nestedFragments = _p66._3;
	var astFragmentSpreadInfo = {
		name: _p65._0.name,
		directives: {ctor: '[]'}
	};
	return A4(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SelectionSpec,
		_jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$FragmentSpread(astFragmentSpreadInfo),
		function (_p67) {
			return _elm_lang$core$Json_Decode$maybe(
				decoder(_p67));
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$fragmentVariables(_p68),
		A2(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mergeFragments,
			{
				ctor: '::',
				_0: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$fragmentAST(_p68),
				_1: {ctor: '[]'}
			},
			nestedFragments));
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$inlineFragment = F2(
	function (maybeTypeCondition, spec) {
		var _p69 = spec;
		var sourceType = _p69._0;
		var decoder = _p69._1;
		var vars = _p69._2;
		var fragments = _p69._3;
		var astInlineFragmentInfo = {
			typeCondition: maybeTypeCondition,
			directives: {ctor: '[]'},
			selectionSet: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionSetFromSourceType(sourceType)
		};
		return A4(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SelectionSpec,
			_jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$InlineFragment(astInlineFragmentInfo),
			function (_p70) {
				return _elm_lang$core$Json_Decode$maybe(
					decoder(_p70));
			},
			vars,
			fragments);
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Field = {ctor: 'Field'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$FragmentSpread = {ctor: 'FragmentSpread'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$InlineFragment = {ctor: 'InlineFragment'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$AnyType = {ctor: 'AnyType'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$produce = function (x) {
	return A4(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec,
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$AnyType,
		_elm_lang$core$Basics$always(
			_elm_lang$core$Json_Decode$succeed(x)),
		{ctor: '[]'},
		{ctor: '[]'});
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SpecifiedType = function (a) {
	return {ctor: 'SpecifiedType', _0: a};
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$join = F2(
	function (a, b) {
		var _p71 = {ctor: '_Tuple2', _0: a, _1: b};
		if (_p71._0.ctor === 'SpecifiedType') {
			if (_p71._1.ctor === 'SpecifiedType') {
				var _p73 = _p71._1._0;
				var _p72 = _p71._0._0;
				return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SpecifiedType(
					_elm_lang$core$Native_Utils.update(
						_p72,
						{
							coreType: A2(_p72.join, _p72.coreType, _p73.coreType),
							selectionSet: A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mergeSelectionSets, _p72.selectionSet, _p73.selectionSet)
						}));
			} else {
				return a;
			}
		} else {
			return b;
		}
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$map2 = F3(
	function (f, _p75, _p74) {
		var _p76 = _p75;
		var _p77 = _p74;
		var mergedFragments = A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mergeFragments, _p76._3, _p77._3);
		var mergedVariables = A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mergeVariables, _p76._2, _p77._2);
		var joinedDecoder = function (selectionSet) {
			return A3(
				_elm_lang$core$Json_Decode$map2,
				f,
				_p76._1(selectionSet),
				_p77._1(selectionSet));
		};
		var joinedSourceType = A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$join, _p76._0, _p77._0);
		return A4(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec, joinedSourceType, joinedDecoder, mergedVariables, mergedFragments);
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$Nullable = {ctor: 'Nullable'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$NonNull = {ctor: 'NonNull'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$NonNullFlag = {ctor: 'NonNullFlag'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nonNullFlag = _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$NonNullFlag;
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$primitiveSpec = F2(
	function (coreType, decoder) {
		return A4(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec,
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SpecifiedType(
				{nullability: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nonNullFlag, coreType: coreType, join: _elm_lang$core$Basics$always, selectionSet: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$emptySelectionSet}),
			_elm_lang$core$Basics$always(decoder),
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$customScalar = F2(
	function (customTypeMarker, decoder) {
		return A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$primitiveSpec, customTypeMarker, decoder);
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$NullableFlag = {ctor: 'NullableFlag'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nullableFlag = _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$NullableFlag;
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nullable = function (_p78) {
	var _p79 = _p78;
	var _p85 = _p79._2;
	var _p84 = _p79._3;
	var _p83 = _p79._1;
	var _p80 = _p79._0;
	if (_p80.ctor === 'SpecifiedType') {
		return A4(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec,
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SpecifiedType(
				_elm_lang$core$Native_Utils.update(
					_p80._0,
					{nullability: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nullableFlag})),
			function (_p81) {
				return _elm_lang$core$Json_Decode$nullable(
					_p83(_p81));
			},
			_p85,
			_p84);
	} else {
		return A4(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec,
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$AnyType,
			function (_p82) {
				return _elm_lang$core$Json_Decode$nullable(
					_p83(_p82));
			},
			_p85,
			_p84);
	}
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$IntType = {ctor: 'IntType'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$int = A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$primitiveSpec, _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$IntType, _elm_lang$core$Json_Decode$int);
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$FloatType = {ctor: 'FloatType'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$float = A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$primitiveSpec, _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$FloatType, _elm_lang$core$Json_Decode$float);
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$StringType = {ctor: 'StringType'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$string = A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$primitiveSpec, _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$StringType, _elm_lang$core$Json_Decode$string);
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$BooleanType = {ctor: 'BooleanType'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$bool = A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$primitiveSpec, _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$BooleanType, _elm_lang$core$Json_Decode$bool);
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$IdType = {ctor: 'IdType'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$id = A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$primitiveSpec, _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$IdType, _elm_lang$core$Json_Decode$string);
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$EnumType = function (a) {
	return {ctor: 'EnumType', _0: a};
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$enumJoin = F2(
	function (_p87, _p86) {
		var _p88 = _p87;
		var _p89 = _p86;
		return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$EnumType(
			_elm_lang$core$Set$toList(
				A2(
					_elm_lang$core$Set$intersect,
					_elm_lang$core$Set$fromList(_p89._0),
					_elm_lang$core$Set$fromList(_p88._0))));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$enumWithFallback = F2(
	function (fallbackDecoder, labelledValues) {
		var labels = A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$first, labelledValues);
		var decoderFromLabel = A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$decoderFromEnumLabel, fallbackDecoder, labelledValues);
		var decoder = A2(_elm_lang$core$Json_Decode$andThen, decoderFromLabel, _elm_lang$core$Json_Decode$string);
		return A4(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec,
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SpecifiedType(
				{
					nullability: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nonNullFlag,
					coreType: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$EnumType(labels),
					join: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$enumJoin,
					selectionSet: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$emptySelectionSet
				}),
			_elm_lang$core$Basics$always(decoder),
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$enum = _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$enumWithFallback(
	function (label) {
		return _elm_lang$core$Json_Decode$fail(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Unexpected enum value ',
				_elm_lang$core$Basics$toString(label)));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$enumWithDefault = function (ctr) {
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$enumWithFallback(
		function (label) {
			return _elm_lang$core$Json_Decode$succeed(
				ctr(label));
		});
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ListType = function (a) {
	return {ctor: 'ListType', _0: a};
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$listJoin = F2(
	function (_p91, _p90) {
		var _p92 = _p91;
		var _p93 = _p90;
		return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ListType(
			A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$join, _p92._0, _p93._0));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$list = function (_p94) {
	var _p95 = _p94;
	var _p97 = _p95._0;
	return A4(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec,
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SpecifiedType(
			{
				nullability: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nonNullFlag,
				coreType: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ListType(_p97),
				join: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$listJoin,
				selectionSet: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$selectionSetFromSourceType(_p97)
			}),
		function (_p96) {
			return _elm_lang$core$Json_Decode$list(
				_p95._1(_p96));
		},
		_p95._2,
		_p95._3);
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ObjectType = {ctor: 'ObjectType'};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$extract = function (_p98) {
	var _p99 = _p98;
	return A4(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec,
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SpecifiedType(
			{
				nullability: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nonNullFlag,
				coreType: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ObjectType,
				join: _elm_lang$core$Basics$always,
				selectionSet: _jamesmacaulay$elm_graphql$GraphQL_Request_Document_AST$SelectionSet(
					{
						ctor: '::',
						_0: _p99._0,
						_1: {ctor: '[]'}
					})
			}),
		_p99._1,
		_p99._2,
		_p99._3);
};
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$with = F2(
	function (selection, objectSpec) {
		return A3(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			objectSpec,
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$extract(selection));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$emptyObjectSpecifiedType = _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$SpecifiedType(
	{nullability: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nonNullFlag, coreType: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ObjectType, join: _elm_lang$core$Basics$always, selectionSet: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$emptySelectionSet});
var _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$object = function (ctr) {
	return A4(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$ValueSpec,
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$emptyObjectSpecifiedType,
		_elm_lang$core$Basics$always(
			_elm_lang$core$Json_Decode$succeed(ctr)),
		{ctor: '[]'},
		{ctor: '[]'});
};
