var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$errorsResponseDecoder = A2(_elm_lang$core$Json_Decode$field, 'errors', _jamesmacaulay$elm_graphql$GraphQL_Response$errorsDecoder);
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$convertHttpError = F3(
	function (wrapHttpError, wrapGraphQLError, httpError) {
		var handleErrorWithResponseBody = function (responseBody) {
			return A2(
				_elm_lang$core$Result$withDefault,
				wrapHttpError(httpError),
				A2(
					_elm_lang$core$Result$map,
					wrapGraphQLError,
					A2(_elm_lang$core$Json_Decode$decodeString, _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$errorsResponseDecoder, responseBody)));
		};
		var _p0 = httpError;
		switch (_p0.ctor) {
			case 'BadStatus':
				return handleErrorWithResponseBody(_p0._0.body);
			case 'BadPayload':
				return handleErrorWithResponseBody(_p0._1.body);
			default:
				return wrapHttpError(httpError);
		}
	});
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$defaultRequestOptions = function (url) {
	return {
		method: 'POST',
		headers: {ctor: '[]'},
		url: url,
		timeout: _elm_lang$core$Maybe$Nothing,
		withCredentials: false
	};
};
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$parameterizedUrl = F3(
	function (url, documentString, variableValues) {
		var variablesParam = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				function (obj) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'&variables=',
						_elm_lang$http$Http$encodeUri(
							A2(_elm_lang$core$Json_Encode$encode, 0, obj)));
				},
				variableValues));
		var firstParamPrefix = A2(_elm_lang$core$String$contains, '?', url) ? '&' : '?';
		var queryParam = A2(
			_elm_lang$core$Basics_ops['++'],
			firstParamPrefix,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'query=',
				_elm_lang$http$Http$encodeUri(documentString)));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			url,
			A2(_elm_lang$core$Basics_ops['++'], queryParam, variablesParam));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$postBodyJson = F2(
	function (documentString, variableValues) {
		var extraParams = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$map,
				function (obj) {
					return {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'variables', _1: obj},
						_1: {ctor: '[]'}
					};
				},
				variableValues));
		var documentValue = _elm_lang$core$Json_Encode$string(documentString);
		return _elm_lang$core$Json_Encode$object(
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'query', _1: documentValue},
					_1: {ctor: '[]'}
				},
				extraParams));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$postBody = F2(
	function (documentString, variableValues) {
		return _elm_lang$http$Http$jsonBody(
			A2(_jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$postBodyJson, documentString, variableValues));
	});
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$requestConfig = F4(
	function (requestOptions, documentString, dataDecoder, variableValues) {
		var _p1 = _elm_lang$core$Native_Utils.eq(requestOptions.method, 'GET') ? {
			ctor: '_Tuple2',
			_0: A3(_jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$parameterizedUrl, requestOptions.url, documentString, variableValues),
			_1: _elm_lang$http$Http$emptyBody
		} : {
			ctor: '_Tuple2',
			_0: requestOptions.url,
			_1: A2(_jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$postBody, documentString, variableValues)
		};
		var url = _p1._0;
		var body = _p1._1;
		var decoder = A2(_elm_lang$core$Json_Decode$field, 'data', dataDecoder);
		return {
			method: requestOptions.method,
			headers: requestOptions.headers,
			url: url,
			body: body,
			expect: _elm_lang$http$Http$expectJson(decoder),
			timeout: requestOptions.timeout,
			withCredentials: requestOptions.withCredentials
		};
	});
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$RequestOptions = F5(
	function (a, b, c, d, e) {
		return {method: a, headers: b, url: c, timeout: d, withCredentials: e};
	});
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$RequestError = F2(
	function (a, b) {
		return {message: a, locations: b};
	});
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$DocumentLocation = F2(
	function (a, b) {
		return {line: a, column: b};
	});
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$RequestConfig = F7(
	function (a, b, c, d, e, f, g) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g};
	});
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$GraphQLError = function (a) {
	return {ctor: 'GraphQLError', _0: a};
};
var _jamesmacaulay$elm_graphql$GraphQL_Client_Http_Util$HttpError = function (a) {
	return {ctor: 'HttpError', _0: a};
};
