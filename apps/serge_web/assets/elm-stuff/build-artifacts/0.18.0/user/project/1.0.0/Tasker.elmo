var _user$project$Tasker$httpErrorToMessage = function (error) {
	var _p0 = error;
	switch (_p0.ctor) {
		case 'BadUrl':
			return A2(_elm_lang$core$Basics_ops['++'], 'error in URL: ', _p0._0);
		case 'NetworkError':
			return 'error with the network connection';
		case 'BadStatus':
			var _p2 = _p0._0;
			var _p1 = A2(_elm_lang$core$Debug$log, 'BadStatus error', _p2.body);
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p2.status.code),
				A2(_elm_lang$core$Basics_ops['++'], ' ', _p2.status.message));
		case 'BadPayload':
			return A2(_elm_lang$core$Basics_ops['++'], 'decoding Failed: ', _p0._0);
		default:
			return _elm_lang$core$Basics$toString(error);
	}
};
var _user$project$Tasker$graphQLErrorToMessage = F2(
	function (label, error) {
		var message = function () {
			var _p3 = error;
			if (_p3.ctor === 'HttpError') {
				return _user$project$Tasker$httpErrorToMessage(_p3._0);
			} else {
				return _elm_lang$core$Basics$toString(_p3._0);
			}
		}();
		return A2(
			_elm_lang$core$Basics_ops['++'],
			label,
			A2(_elm_lang$core$Basics_ops['++'], ': ', message));
	});
var _user$project$Tasker$orderTaskEditors = function (editors) {
	return A2(
		_elm_lang$core$List$sortWith,
		F2(
			function (a, b) {
				if (_elm_lang$core$Native_Utils.eq(a.task.scheduledOn, b.task.scheduledOn)) {
					return A2(_elm_lang$core$Basics$compare, a.task.rank, b.task.rank);
				} else {
					var _p4 = a.task.scheduledOn;
					if (_p4.ctor === 'Just') {
						var _p5 = b.task.scheduledOn;
						if (_p5.ctor === 'Just') {
							return A2(_elm_lang$core$Basics$compare, _p4._0, _p5._0);
						} else {
							return _elm_lang$core$Basics$LT;
						}
					} else {
						return _elm_lang$core$Basics$GT;
					}
				}
			}),
		editors);
};
var _user$project$Tasker$replaceTask = F3(
	function (id, task, model) {
		return _user$project$Tasker$orderTaskEditors(
			A2(
				_elm_lang$core$List$map,
				function (editor) {
					return _elm_lang$core$Native_Utils.eq(editor.task.id, id) ? A2(_user$project$Model$taskToEditor, model.context, task) : editor;
				},
				model.taskEditors));
	});
var _user$project$Tasker$dropdownStatesForTasks = function (tasks) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			function (task) {
				return {ctor: '_Tuple2', _0: task.id, _1: _rundis$elm_bootstrap$Bootstrap_Dropdown$initialState};
			},
			tasks));
};
var _user$project$Tasker$createNewTask = function (model) {
	var scheduledOn = function () {
		var _p6 = model.datePeriod;
		switch (_p6.ctor) {
			case 'Yesterday':
				return _elm_lang$core$Maybe$Just(model.context.yesterday);
			case 'Today':
				return _elm_lang$core$Maybe$Just(model.context.today);
			case 'Tomorrow':
				return _elm_lang$core$Maybe$Just(model.context.tomorrow);
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	}();
	var newTask = A2(_user$project$Model$makeNewTaskEditor, model, scheduledOn);
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{
				taskEditors: A2(
					_elm_lang$core$List$append,
					model.taskEditors,
					{
						ctor: '::',
						_0: newTask,
						_1: {ctor: '[]'}
					}),
				dropdownStates: A3(_elm_lang$core$Dict$insert, newTask.task.id, _rundis$elm_bootstrap$Bootstrap_Dropdown$initialState, model.dropdownStates),
				currentTaskLabel: '',
				currentTaskSeq: model.currentTaskSeq + 1
			}),
		_1: A2(
			_elm_lang$core$Task$attempt,
			_user$project$Model$CreateTask,
			_user$project$Api$sendMutationRequest(
				_user$project$Api$createTaskRequest(newTask.task)))
	};
};
var _user$project$Tasker$hideConfirmModal = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{confirmModalState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState});
};
var _user$project$Tasker$updateModelForTime = F2(
	function (time, model) {
		var newContext = A2(_user$project$Model$timeToAppContext, model.timeZone, time);
		var updateSchedule = function (editor) {
			return _elm_lang$core$Native_Utils.update(
				editor,
				{
					period: A2(_user$project$Model$taskSchedule, newContext, editor.task)
				});
		};
		return _elm_lang$core$Native_Utils.eq(newContext.today, model.context.today) ? model : _elm_lang$core$Native_Utils.update(
			model,
			{
				context: newContext,
				taskEditors: A2(
					_elm_lang$core$List$map,
					updateSchedule,
					A2(_user$project$Model$discardOldTasks, newContext, model.taskEditors))
			});
	});
var _user$project$Tasker$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p7 = msg;
			switch (_p7.ctor) {
				case 'NoOp':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				case 'NavMsg':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{navState: _p7._0}),
						{ctor: '[]'});
				case 'SummaryModalMsg':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{summaryModalState: _p7._0}),
						{ctor: '[]'});
				case 'ConfirmModalMsg':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{confirmModalState: _p7._0}),
						{ctor: '[]'});
				case 'DropdownMsg':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								dropdownStates: A3(_elm_lang$core$Dict$insert, _p7._0, _p7._1, model.dropdownStates)
							}),
						{ctor: '[]'});
				case 'ShowSummary':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{summaryModalState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState}),
						{ctor: '[]'});
				case 'HideSummary':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{summaryModalState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
						{ctor: '[]'});
				case 'RequestConfirmation':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{confirmation: _p7._0, confirmModalState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState}),
						{ctor: '[]'});
				case 'DiscardConfirmation':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_user$project$Tasker$hideConfirmModal(model),
						{ctor: '[]'});
				case 'UpdateAppContext':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_user$project$Tasker$updateModelForTime, _p7._0, model),
						{ctor: '[]'});
				case 'ClearMessage':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{message: _user$project$Model$MessageNone}),
						{ctor: '[]'});
				case 'SetTimeZone':
					var timeZone = A2(
						_elm_lang$core$Maybe$withDefault,
						_elm_community$elm_time$Time_TimeZones$utc(
							{ctor: '_Tuple0'}),
						_elm_community$elm_time$Time_TimeZones$fromName(_p7._0));
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{timeZone: timeZone}),
						{ctor: '[]'});
				case 'UpdateCurrentTask':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{currentTaskLabel: _p7._0}),
						{ctor: '[]'});
				case 'AddCurrentTask':
					var _p8 = model.currentTaskLabel;
					if (_p8 === '') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					} else {
						return _user$project$Tasker$createNewTask(model);
					}
				case 'FetchTask':
					if (_p7._0.ctor === 'Ok') {
						var _p9 = A2(_elm_lang$core$Debug$log, 'FetchTask: ', _p7._0._0);
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									message: _user$project$Model$MessageError(
										A2(_user$project$Tasker$graphQLErrorToMessage, 'Fetching task failed', _p7._0._0))
								}),
							{ctor: '[]'});
					}
				case 'FetchTasks':
					if (_p7._0.ctor === 'Ok') {
						var _p10 = _p7._0._0;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									taskEditors: _user$project$Tasker$orderTaskEditors(
										A2(
											_elm_lang$core$List$map,
											_user$project$Model$taskToEditor(model.context),
											_p10)),
									dropdownStates: _user$project$Tasker$dropdownStatesForTasks(_p10)
								}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									message: _user$project$Model$MessageError(
										A2(_user$project$Tasker$graphQLErrorToMessage, 'Fetching tasks failed', _p7._0._0))
								}),
							{ctor: '[]'});
					}
				case 'CreateTask':
					if (_p7._0.ctor === 'Ok') {
						var _p11 = _p7._0._0;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									taskEditors: A3(_user$project$Tasker$replaceTask, _p11.tid, _p11.task, model),
									dropdownStates: model.dropdownStates
								}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									message: _user$project$Model$MessageError(
										A2(_user$project$Tasker$graphQLErrorToMessage, 'Creating the task failed', _p7._0._0))
								}),
							{ctor: '[]'});
					}
				case 'RequestTaskUpdate':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_user$project$Model$UpdateTask,
								_user$project$Api$sendMutationRequest(
									_user$project$Api$updateTaskRequest(_p7._0))),
							_1: {ctor: '[]'}
						});
				case 'UpdateTask':
					if (_p7._0.ctor === 'Ok') {
						var _p12 = _p7._0._0;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									taskEditors: A3(_user$project$Tasker$replaceTask, _p12.id, _p12, model),
									dropdownStates: model.dropdownStates
								}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									message: _user$project$Model$MessageError(
										A2(_user$project$Tasker$graphQLErrorToMessage, 'Updating the task failed', _p7._0._0))
								}),
							{ctor: '[]'});
					}
				case 'RequestTaskDeletion':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_user$project$Model$DeleteTask,
								_user$project$Api$sendMutationRequest(
									_user$project$Api$deleteTaskRequest(_p7._0))),
							_1: {ctor: '[]'}
						});
				case 'DeleteTask':
					if (_p7._0.ctor === 'Ok') {
						var _p14 = _p7._0._0;
						var updatedTaskEditors = A2(
							_elm_lang$core$List$filter,
							function (editor) {
								return !_elm_lang$core$Native_Utils.eq(editor.task.id, _p14.id);
							},
							model.taskEditors);
						var _p13 = A2(
							_user$project$Tasker$update,
							_user$project$Model$DiscardConfirmation,
							_user$project$Tasker$hideConfirmModal(model));
						var newModel = _p13._0;
						var cmds = _p13._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								newModel,
								{
									taskEditors: updatedTaskEditors,
									message: _user$project$Model$MessageSuccess(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Task \"',
											A2(_elm_lang$core$Basics_ops['++'], _p14.label, '\" was deleted successfully.')))
								}),
							_1: cmds
						};
					} else {
						var newModel = _user$project$Tasker$hideConfirmModal(model);
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								newModel,
								{
									message: _user$project$Model$MessageError(
										A2(_user$project$Tasker$graphQLErrorToMessage, 'Updating the task failed', _p7._0._0))
								}),
							{ctor: '[]'});
					}
				case 'ChangeDatePeriod':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{datePeriod: _p7._0}),
						{ctor: '[]'});
				case 'ToggleShowCompleted':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{showCompleted: !model.showCompleted}),
						{ctor: '[]'});
				case 'ToggleShowYesterday':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								showYesterday: !model.showYesterday,
								datePeriod: _elm_lang$core$Native_Utils.eq(model.datePeriod, _user$project$Model$Yesterday) ? _user$project$Model$Today : model.datePeriod
							}),
						{ctor: '[]'});
				case 'ConfirmTaskDeletion':
					var confirmation = _elm_lang$core$Native_Utils.update(
						_user$project$Model$emptyConfirmation,
						{
							title: 'Delete Task',
							text: A2(
								_elm_lang$core$Basics_ops['++'],
								'Do you really want to delete task \"',
								A2(_elm_lang$core$Basics_ops['++'], _p7._1, '\"?')),
							btnOk: _rundis$elm_bootstrap$Bootstrap_Button$danger,
							msgOk: _user$project$Model$RequestTaskDeletion(_p7._0)
						});
					var _v7 = _user$project$Model$RequestConfirmation(confirmation),
						_v8 = model;
					msg = _v7;
					model = _v8;
					continue update;
				case 'UpdateEditingTask':
					var _p16 = _p7._0;
					var updateTaskIfId = function (editor) {
						return _elm_lang$core$Native_Utils.eq(editor.task.id, _p16) ? _elm_lang$core$Native_Utils.update(
							editor,
							{editing: _p7._1, editingLabel: _p7._2}) : editor;
					};
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								taskEditors: A2(_elm_lang$core$List$map, updateTaskIfId, model.taskEditors),
								dropdownStates: model.dropdownStates
							}),
						_1: A2(
							_elm_lang$core$Task$attempt,
							function (_p15) {
								return _user$project$Model$NoOp;
							},
							_elm_lang$dom$Dom$focus(
								A2(_elm_lang$core$Basics_ops['++'], 'edit-task-', _p16)))
					};
				case 'ShowOrdering':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{orderingMode: true}),
						{ctor: '[]'});
				case 'HideOrdering':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{orderingMode: false}),
						{ctor: '[]'});
				default:
					var _p17 = A2(_norpan$elm_html5_drag_drop$Html5_DragDrop$update, _p7._0, model.dragDrop);
					var dragDropModel = _p17._0;
					var result = _p17._1;
					var _p18 = A2(_elm_lang$core$Debug$log, 'result', result);
					var command = function () {
						var _p19 = result;
						if (_p19.ctor === 'Just') {
							return A2(
								_elm_lang$core$Task$attempt,
								_user$project$Model$UpdateTask,
								_user$project$Api$sendMutationRequest(
									A2(_user$project$Api$moveTaskRequest, _p19._0._0.task, _p19._0._1)));
						} else {
							return _elm_lang$core$Platform_Cmd$none;
						}
					}();
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{dragDrop: dragDropModel}),
						_1: command
					};
			}
		}
	});
var _user$project$Tasker$getTimeZone = _elm_lang$core$Native_Platform.outgoingPort(
	'getTimeZone',
	function (v) {
		return null;
	});
var _user$project$Tasker$init = function (config) {
	var _p20 = _rundis$elm_bootstrap$Bootstrap_Navbar$initialState(_user$project$Model$NavMsg);
	var navState = _p20._0;
	var navCmd = _p20._1;
	return {
		ctor: '_Tuple2',
		_0: A2(_user$project$Model$initialModel, config, navState),
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: navCmd,
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$core$Task$perform, _user$project$Model$UpdateAppContext, _elm_lang$core$Time$now),
					_1: {
						ctor: '::',
						_0: _user$project$Tasker$getTimeZone(
							{ctor: '_Tuple0'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_user$project$Model$FetchTasks,
								_user$project$Api$sendQueryRequest(_user$project$Api$fetchTasksRequest)),
							_1: {ctor: '[]'}
						}
					}
				}
			})
	};
};
var _user$project$Tasker$setTimeZone = _elm_lang$core$Native_Platform.incomingPort('setTimeZone', _elm_lang$core$Json_Decode$string);
var _user$project$Tasker$subscriptions = function (model) {
	var dropdownSubscription = function (_p21) {
		var _p22 = _p21;
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Dropdown$subscriptions,
			_p22._1,
			_user$project$Model$DropdownMsg(_p22._0));
	};
	return _elm_lang$core$Platform_Sub$batch(
		A2(
			_elm_lang$core$List$append,
			{
				ctor: '::',
				_0: _user$project$Tasker$setTimeZone(_user$project$Model$SetTimeZone),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$core$Time$every, _elm_lang$core$Time$minute, _user$project$Model$UpdateAppContext),
					_1: {ctor: '[]'}
				}
			},
			A2(
				_elm_lang$core$List$map,
				dropdownSubscription,
				_elm_lang$core$Dict$toList(model.dropdownStates))));
};
var _user$project$Tasker$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Tasker$init, update: _user$project$Tasker$update, subscriptions: _user$project$Tasker$subscriptions, view: _user$project$View$view})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (access_token) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (email) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (id) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (name) {
									return _elm_lang$core$Json_Decode$succeed(
										{access_token: access_token, email: email, id: id, name: name});
								},
								A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int));
				},
				A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'access_token', _elm_lang$core$Json_Decode$string)));
