var _user$project$Model$latestYesterday = F2(
	function (today, editors) {
		var completedBeforeToday = function (editor) {
			var _p0 = editor.task.completedOn;
			if (_p0.ctor === 'Just') {
				return _elm_lang$core$Native_Utils.cmp(_p0._0, today) < 0;
			} else {
				return false;
			}
		};
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$maximum(
				A2(
					_elm_lang$core$List$map,
					function (editor) {
						return A2(_elm_lang$core$Maybe$withDefault, '', editor.task.completedOn);
					},
					A2(_elm_lang$core$List$filter, completedBeforeToday, editors))));
	});
var _user$project$Model$discardOldTasks = F2(
	function (context, editors) {
		var yesterday = A2(_user$project$Model$latestYesterday, context.today, editors);
		var shouldKeep = function (editor) {
			var _p1 = editor.task.completedOn;
			if (_p1.ctor === 'Just') {
				return _elm_lang$core$Native_Utils.cmp(_p1._0, yesterday) > -1;
			} else {
				return true;
			}
		};
		return A2(_elm_lang$core$List$filter, shouldKeep, editors);
	});
var _user$project$Model$earliestYesterday = function (editors) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$minimum(
			A2(
				_elm_lang$core$List$map,
				function (editor) {
					return A2(_elm_lang$core$Maybe$withDefault, '', editor.task.completedOn);
				},
				A2(
					_elm_lang$core$List$filter,
					function (_) {
						return _.completed;
					},
					editors))));
};
var _user$project$Model$formatShortDate = function (date) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A3(_elm_lang$core$String$slice, 5, 7, date),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/',
			A3(_elm_lang$core$String$slice, 8, 10, date)));
};
var _user$project$Model$timeToAppContext = F2(
	function (timeZone, time) {
		var now = A2(
			_elm_community$elm_time$Time_ZonedDateTime$fromDateTime,
			timeZone,
			_elm_community$elm_time$Time_DateTime$fromTimestamp(time));
		var today = A3(
			_elm_community$elm_time$Time_Date$date,
			_elm_community$elm_time$Time_ZonedDateTime$year(now),
			_elm_community$elm_time$Time_ZonedDateTime$month(now),
			_elm_community$elm_time$Time_ZonedDateTime$day(now));
		return {
			yesterday: _elm_community$elm_time$Time_Date$toISO8601(
				A2(_elm_community$elm_time$Time_Date$addDays, -1, today)),
			today: _elm_community$elm_time$Time_Date$toISO8601(today),
			tomorrow: _elm_community$elm_time$Time_Date$toISO8601(
				A2(_elm_community$elm_time$Time_Date$addDays, 1, today))
		};
	});
var _user$project$Model$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return {config: a, navState: b, summaryModalState: c, confirmModalState: d, dropdownStates: e, orderingMode: f, message: g, context: h, timeZone: i, currentTaskLabel: j, currentTaskSeq: k, taskEditors: l, datePeriod: m, showCompleted: n, showYesterday: o, confirmation: p, dragDrop: q};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Model$AppContext = F3(
	function (a, b, c) {
		return {yesterday: a, today: b, tomorrow: c};
	});
var _user$project$Model$makeEmptyAppContext = A3(_user$project$Model$AppContext, '', '', '');
var _user$project$Model$Confirmation = F7(
	function (a, b, c, d, e, f, g) {
		return {title: a, text: b, labelOk: c, btnOk: d, msgOk: e, labelCancel: f, msgCancel: g};
	});
var _user$project$Model$TaskEditor = F5(
	function (a, b, c, d, e) {
		return {task: a, editing: b, editingLabel: c, period: d, completed: e};
	});
var _user$project$Model$AppConfig = F4(
	function (a, b, c, d) {
		return {id: a, name: b, email: c, access_token: d};
	});
var _user$project$Model$CreateTaskResponse = F2(
	function (a, b) {
		return {tid: a, task: b};
	});
var _user$project$Model$DragDropMsg = function (a) {
	return {ctor: 'DragDropMsg', _0: a};
};
var _user$project$Model$ToggleShowYesterday = {ctor: 'ToggleShowYesterday'};
var _user$project$Model$ToggleShowCompleted = {ctor: 'ToggleShowCompleted'};
var _user$project$Model$ChangeDatePeriod = function (a) {
	return {ctor: 'ChangeDatePeriod', _0: a};
};
var _user$project$Model$ConfirmTaskDeletion = F2(
	function (a, b) {
		return {ctor: 'ConfirmTaskDeletion', _0: a, _1: b};
	});
var _user$project$Model$SetTimeZone = function (a) {
	return {ctor: 'SetTimeZone', _0: a};
};
var _user$project$Model$UpdateAppContext = function (a) {
	return {ctor: 'UpdateAppContext', _0: a};
};
var _user$project$Model$ClearMessage = {ctor: 'ClearMessage'};
var _user$project$Model$FetchTask = function (a) {
	return {ctor: 'FetchTask', _0: a};
};
var _user$project$Model$DeleteTask = function (a) {
	return {ctor: 'DeleteTask', _0: a};
};
var _user$project$Model$UpdateTask = function (a) {
	return {ctor: 'UpdateTask', _0: a};
};
var _user$project$Model$CreateTask = function (a) {
	return {ctor: 'CreateTask', _0: a};
};
var _user$project$Model$FetchTasks = function (a) {
	return {ctor: 'FetchTasks', _0: a};
};
var _user$project$Model$RequestTaskDeletion = function (a) {
	return {ctor: 'RequestTaskDeletion', _0: a};
};
var _user$project$Model$RequestTaskUpdate = function (a) {
	return {ctor: 'RequestTaskUpdate', _0: a};
};
var _user$project$Model$AddCurrentTask = {ctor: 'AddCurrentTask'};
var _user$project$Model$UpdateEditingTask = F3(
	function (a, b, c) {
		return {ctor: 'UpdateEditingTask', _0: a, _1: b, _2: c};
	});
var _user$project$Model$UpdateCurrentTask = function (a) {
	return {ctor: 'UpdateCurrentTask', _0: a};
};
var _user$project$Model$HideOrdering = {ctor: 'HideOrdering'};
var _user$project$Model$ShowOrdering = {ctor: 'ShowOrdering'};
var _user$project$Model$DiscardConfirmation = {ctor: 'DiscardConfirmation'};
var _user$project$Model$RequestConfirmation = function (a) {
	return {ctor: 'RequestConfirmation', _0: a};
};
var _user$project$Model$HideSummary = {ctor: 'HideSummary'};
var _user$project$Model$ShowSummary = {ctor: 'ShowSummary'};
var _user$project$Model$DropdownMsg = F2(
	function (a, b) {
		return {ctor: 'DropdownMsg', _0: a, _1: b};
	});
var _user$project$Model$ConfirmModalMsg = function (a) {
	return {ctor: 'ConfirmModalMsg', _0: a};
};
var _user$project$Model$SummaryModalMsg = function (a) {
	return {ctor: 'SummaryModalMsg', _0: a};
};
var _user$project$Model$NavMsg = function (a) {
	return {ctor: 'NavMsg', _0: a};
};
var _user$project$Model$NoOp = {ctor: 'NoOp'};
var _user$project$Model$emptyConfirmation = {title: '', text: '', labelOk: 'Ok', msgOk: _user$project$Model$NoOp, btnOk: _rundis$elm_bootstrap$Bootstrap_Button$primary, labelCancel: 'Cancel', msgCancel: _user$project$Model$DiscardConfirmation};
var _user$project$Model$MessageError = function (a) {
	return {ctor: 'MessageError', _0: a};
};
var _user$project$Model$MessageNotice = function (a) {
	return {ctor: 'MessageNotice', _0: a};
};
var _user$project$Model$MessageSuccess = function (a) {
	return {ctor: 'MessageSuccess', _0: a};
};
var _user$project$Model$MessageNone = {ctor: 'MessageNone'};
var _user$project$Model$Later = {ctor: 'Later'};
var _user$project$Model$Tomorrow = {ctor: 'Tomorrow'};
var _user$project$Model$Today = {ctor: 'Today'};
var _user$project$Model$initialModel = F2(
	function (config, navState) {
		return {
			config: config,
			navState: navState,
			summaryModalState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
			confirmModalState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
			dropdownStates: _elm_lang$core$Dict$empty,
			orderingMode: false,
			message: _user$project$Model$MessageNone,
			context: _user$project$Model$makeEmptyAppContext,
			timeZone: _elm_community$elm_time$Time_TimeZones$utc(
				{ctor: '_Tuple0'}),
			currentTaskLabel: '',
			currentTaskSeq: 1,
			taskEditors: {ctor: '[]'},
			datePeriod: _user$project$Model$Today,
			showCompleted: false,
			showYesterday: false,
			confirmation: _user$project$Model$emptyConfirmation,
			dragDrop: _norpan$elm_html5_drag_drop$Html5_DragDrop$init
		};
	});
var _user$project$Model$Yesterday = {ctor: 'Yesterday'};
var _user$project$Model$taskSchedule = F2(
	function (context, task) {
		var _p2 = task.completedOn;
		if (_p2.ctor === 'Just') {
			var _p3 = _p2._0;
			return (_elm_lang$core$Native_Utils.cmp(_p3, context.today) < 0) ? _user$project$Model$Yesterday : (_elm_lang$core$Native_Utils.eq(_p3, context.today) ? _user$project$Model$Today : _user$project$Model$Tomorrow);
		} else {
			var _p4 = task.scheduledOn;
			if (_p4.ctor === 'Just') {
				var _p5 = _p4._0;
				return (_elm_lang$core$Native_Utils.cmp(_p5, context.today) < 0) ? _user$project$Model$Yesterday : (_elm_lang$core$Native_Utils.eq(_p5, context.today) ? _user$project$Model$Today : (_elm_lang$core$Native_Utils.eq(_p5, context.tomorrow) ? _user$project$Model$Tomorrow : _user$project$Model$Later));
			} else {
				return _user$project$Model$Later;
			}
		}
	});
var _user$project$Model$taskToEditor = F2(
	function (context, task) {
		return {
			task: task,
			editing: false,
			editingLabel: task.label,
			period: A2(_user$project$Model$taskSchedule, context, task),
			completed: !_elm_lang$core$Native_Utils.eq(task.completedOn, _elm_lang$core$Maybe$Nothing)
		};
	});
var _user$project$Model$makeNewTaskEditor = F2(
	function (model, scheduledOn) {
		return A2(
			_user$project$Model$taskToEditor,
			model.context,
			A4(
				_user$project$StoryTask$makeNewTask,
				model.currentTaskSeq,
				model.currentTaskLabel,
				_elm_lang$core$List$length(model.taskEditors),
				scheduledOn));
	});
var _user$project$Model$tasksForCurrentTaskPeriod = function (model) {
	var selectPeriod = function (editor) {
		return ((!model.showYesterday) && _elm_lang$core$Native_Utils.eq(model.datePeriod, _user$project$Model$Today)) ? (_elm_lang$core$Native_Utils.eq(editor.period, _user$project$Model$Yesterday) || _elm_lang$core$Native_Utils.eq(editor.period, _user$project$Model$Today)) : _elm_lang$core$Native_Utils.eq(editor.period, model.datePeriod);
	};
	return A2(_elm_lang$core$List$filter, selectPeriod, model.taskEditors);
};
var _user$project$Model$MoveTaskAfter = function (a) {
	return {ctor: 'MoveTaskAfter', _0: a};
};
var _user$project$Model$MoveTaskBefore = function (a) {
	return {ctor: 'MoveTaskBefore', _0: a};
};
