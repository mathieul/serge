var _user$project$Api$makeUpdateTaskVars = function (task) {
	return {
		task: task,
		uncomplete: _elm_lang$core$Native_Utils.eq(task.completedOn, _elm_lang$core$Maybe$Nothing),
		unschedule: _elm_lang$core$Native_Utils.eq(task.scheduledOn, _elm_lang$core$Maybe$Nothing),
		beforeTaskId: _elm_lang$core$Maybe$Nothing,
		afterTaskId: _elm_lang$core$Maybe$Nothing
	};
};
var _user$project$Api$storyTask = A2(
	_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$with,
	A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field,
		'completedOn',
		{ctor: '[]'},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nullable(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$string)),
	A2(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$with,
		A3(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field,
			'scheduledOn',
			{ctor: '[]'},
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$nullable(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$string)),
		A2(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$with,
			A3(
				_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field,
				'rank',
				{ctor: '[]'},
				_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$int),
			A2(
				_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$with,
				A3(
					_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field,
					'label',
					{ctor: '[]'},
					_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$string),
				A2(
					_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$with,
					A3(
						_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field,
						'id',
						{ctor: '[]'},
						_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$id),
					_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$object(_user$project$StoryTask$StoryTask))))));
var _user$project$Api$fetchTaskQuery = function () {
	var taskIDVar = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'id',
		function (_) {
			return _.id;
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$id);
	var variables = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'id',
			_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(taskIDVar)
		},
		_1: {ctor: '[]'}
	};
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$queryDocument(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$extract(
			A3(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field, 'task', variables, _user$project$Api$storyTask)));
}();
var _user$project$Api$fetchTaskRequest = function (id) {
	return A2(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$request,
		{id: id},
		_user$project$Api$fetchTaskQuery);
};
var _user$project$Api$fetchTasksQuery = function () {
	var includeYesterdayVar = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'includeYesterday',
		function (_) {
			return _.includeYesterday;
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$bool);
	var variables = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'includeYesterday',
			_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(includeYesterdayVar)
		},
		_1: {ctor: '[]'}
	};
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$queryDocument(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$extract(
			A3(
				_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field,
				'tasks',
				variables,
				_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$list(_user$project$Api$storyTask))));
}();
var _user$project$Api$fetchTasksRequest = A2(
	_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$request,
	{includeYesterday: true},
	_user$project$Api$fetchTasksQuery);
var _user$project$Api$createTaskQuery = function () {
	var variables = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'tid',
			_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(
				A3(
					_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
					'tmpId',
					function (_) {
						return _.id;
					},
					_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$id))
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'label',
				_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(
					A3(
						_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
						'label',
						function (_) {
							return _.label;
						},
						_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$string))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'scheduledOn',
					_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(
						A3(
							_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
							'scheduledOn',
							function (_) {
								return _.scheduledOn;
							},
							_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$nullable(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$string)))
				},
				_1: {ctor: '[]'}
			}
		}
	};
	var response = A2(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$with,
		A3(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field,
			'task',
			{ctor: '[]'},
			_user$project$Api$storyTask),
		A2(
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$with,
			A3(
				_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field,
				'tid',
				{ctor: '[]'},
				_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$id),
			_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$object(_user$project$Model$CreateTaskResponse)));
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mutationDocument(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$extract(
			A3(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field, 'createTask', variables, response)));
}();
var _user$project$Api$createTaskRequest = function (task) {
	return A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$request, task, _user$project$Api$createTaskQuery);
};
var _user$project$Api$updateTaskQuery = function () {
	var afterTaskId = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'afterTaskId',
		function (_) {
			return _.afterTaskId;
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$nullable(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$id));
	var beforeTaskId = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'beforeTaskId',
		function (_) {
			return _.beforeTaskId;
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$nullable(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$id));
	var unschedule = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'unschedule',
		function (_) {
			return _.unschedule;
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$bool);
	var uncomplete = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'uncomplete',
		function (_) {
			return _.uncomplete;
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$bool);
	var completedOn = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'completedOn',
		function (_p0) {
			return function (_) {
				return _.completedOn;
			}(
				function (_) {
					return _.task;
				}(_p0));
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$nullable(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$string));
	var scheduledOn = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'scheduledOn',
		function (_p1) {
			return function (_) {
				return _.scheduledOn;
			}(
				function (_) {
					return _.task;
				}(_p1));
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$nullable(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$string));
	var label = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'label',
		function (_p2) {
			return function (_) {
				return _.label;
			}(
				function (_) {
					return _.task;
				}(_p2));
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$string);
	var id = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'taskID',
		function (_p3) {
			return function (_) {
				return _.id;
			}(
				function (_) {
					return _.task;
				}(_p3));
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$id);
	var variables = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'id',
			_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(id)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'label',
				_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(label)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'scheduledOn',
					_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(scheduledOn)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'completedOn',
						_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(completedOn)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'uncomplete',
							_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(uncomplete)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'unschedule',
								_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(unschedule)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'beforeTaskId',
									_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(beforeTaskId)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'afterTaskId',
										_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(afterTaskId)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	};
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mutationDocument(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$extract(
			A3(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field, 'updateTask', variables, _user$project$Api$storyTask)));
}();
var _user$project$Api$updateTaskRequest = function (task) {
	return A2(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$request,
		_user$project$Api$makeUpdateTaskVars(task),
		_user$project$Api$updateTaskQuery);
};
var _user$project$Api$moveTaskRequest = F2(
	function (task, moveRequest) {
		var taskVars = _user$project$Api$makeUpdateTaskVars(task);
		var _p4 = function () {
			var _p5 = moveRequest;
			if (_p5.ctor === 'MoveTaskBefore') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Just(_p5._0.id),
					_1: _elm_lang$core$Maybe$Nothing
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Maybe$Nothing,
					_1: _elm_lang$core$Maybe$Just(_p5._0.id)
				};
			}
		}();
		var beforeTaskId = _p4._0;
		var afterTaskId = _p4._1;
		var moveTaskVars = _elm_lang$core$Native_Utils.update(
			taskVars,
			{beforeTaskId: beforeTaskId, afterTaskId: afterTaskId});
		return A2(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$request, moveTaskVars, _user$project$Api$updateTaskQuery);
	});
var _user$project$Api$deleteTaskQuery = function () {
	var taskIDVar = A3(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$required,
		'taskID',
		function (_) {
			return _.taskID;
		},
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Variable$id);
	var variables = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'id',
			_1: _jamesmacaulay$elm_graphql$GraphQL_Request_Builder_Arg$variable(taskIDVar)
		},
		_1: {ctor: '[]'}
	};
	return _jamesmacaulay$elm_graphql$GraphQL_Request_Builder$mutationDocument(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$extract(
			A3(_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$field, 'deleteTask', variables, _user$project$Api$storyTask)));
}();
var _user$project$Api$deleteTaskRequest = function (id) {
	return A2(
		_jamesmacaulay$elm_graphql$GraphQL_Request_Builder$request,
		{taskID: id},
		_user$project$Api$deleteTaskQuery);
};
var _user$project$Api$graphqlUrl = '/graphql';
var _user$project$Api$sendQueryRequest = function (request) {
	return A2(_jamesmacaulay$elm_graphql$GraphQL_Client_Http$sendQuery, _user$project$Api$graphqlUrl, request);
};
var _user$project$Api$sendMutationRequest = function (request) {
	return A2(_jamesmacaulay$elm_graphql$GraphQL_Client_Http$sendMutation, _user$project$Api$graphqlUrl, request);
};
var _user$project$Api$StoryTaskUpdateVars = F5(
	function (a, b, c, d, e) {
		return {task: a, uncomplete: b, unschedule: c, beforeTaskId: d, afterTaskId: e};
	});
