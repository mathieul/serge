var _user$project$View$messageView = function (message) {
	var view = F2(
		function (kind, content) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class(
						A2(_elm_lang$core$Basics_ops['++'], 'mb-0 alert alert-', kind)),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'alert'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('button'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('close'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Model$ClearMessage),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Ã—'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(content),
						_1: {ctor: '[]'}
					}
				});
		});
	var _p0 = message;
	switch (_p0.ctor) {
		case 'MessageNone':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		case 'MessageSuccess':
			return A2(view, 'success', _p0._0);
		case 'MessageNotice':
			return A2(view, 'info', _p0._0);
		default:
			return A2(view, 'danger', _p0._0);
	}
};
var _user$project$View$taskEditorView = function (editor) {
	var task = editor.task;
	var updateEditingLabelMsg = function (editingLabel) {
		return A3(_user$project$Model$UpdateEditingTask, editor.task.id, true, editingLabel);
	};
	return A2(
		_elm_lang$html$Html$form,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('px-2 Py15'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onSubmit(
					_user$project$Model$RequestTaskUpdate(
						_elm_lang$core$Native_Utils.update(
							task,
							{label: editor.editingLabel}))),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id(
							A2(_elm_lang$core$Basics_ops['++'], 'edit-task-', editor.task.id)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('form-control pull-left'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(editor.editingLabel),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(updateEditingLabelMsg),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('pull-left pt-1 pl-2 text-center'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '20%'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('submit'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('btn btn-primary btn-sm'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Update'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(' '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('button'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('btn btn-secondary btn-sm'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													A3(_user$project$Model$UpdateEditingTask, editor.task.id, false, editor.task.label)),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Cancel'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$View$actionButton = F4(
	function (date, label, taskLabel, task) {
		return _elm_lang$core$Native_Utils.eq(label, taskLabel) ? A2(
			_rundis$elm_bootstrap$Bootstrap_Dropdown$buttonItem,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('disabled'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'TextGhost',
								_1: _elm_lang$core$Native_Utils.eq(label, 'Yesterday')
							},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('fa fa-arrow-right'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(_elm_lang$core$Basics_ops['++'], ' ', label)),
					_1: {ctor: '[]'}
				}
			}) : A2(
			_rundis$elm_bootstrap$Bootstrap_Dropdown$buttonItem,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'TextGhost',
							_1: _elm_lang$core$Native_Utils.eq(label, 'Yesterday')
						},
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						A3(_user$project$StoryTask$changeSchedule, _user$project$Model$RequestTaskUpdate, date, task)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('FaEmpty'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(_elm_lang$core$Basics_ops['++'], ' ', label)),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$View$taskCompletionInfo = F2(
	function (editors, model) {
		var countCompleted = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (editor, count) {
					return editor.completed ? (count + 1) : count;
				}),
			0,
			editors);
		var count = _elm_lang$core$List$length(editors) - countCompleted;
		var label = A2(
			_elm_lang$core$Basics_ops['++'],
			A3(_elm_community$string_extra$String_Extra$pluralize, 'task', 'tasks', count),
			A2(
				_elm_lang$core$Basics_ops['++'],
				' / ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(countCompleted),
					' completed')));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('row text-muted'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('col pl-3'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(label),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('col pr-3 text-right'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$label,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$for('show-yesterday'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('show yesterday'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text(' '),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$input,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$id('show-yesterday'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$checked(model.showYesterday),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('mr-4'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Model$ToggleShowYesterday),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('mr-4'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$label,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$for('show-completed'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('show completed'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' '),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$input,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$id('show-completed'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$checked(model.showCompleted),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Model$ToggleShowCompleted),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Button$button,
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_user$project$Model$ShowOrdering),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$i,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('fa fa-sort'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text(' Sort'),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$View$datePeriodConfig = function (datePeriod) {
	var _p1 = datePeriod;
	switch (_p1.ctor) {
		case 'Yesterday':
			return {ctor: '_Tuple2', _0: 'Yesterday', _1: 'badge-warning'};
		case 'Today':
			return {ctor: '_Tuple2', _0: 'Today', _1: 'badge-success'};
		case 'Tomorrow':
			return {ctor: '_Tuple2', _0: 'Tomorrow', _1: 'badge-info'};
		default:
			return {ctor: '_Tuple2', _0: 'Later', _1: 'badge-default'};
	}
};
var _user$project$View$datePeriodLabel = function (datePeriod) {
	return _elm_lang$core$Tuple$first(
		_user$project$View$datePeriodConfig(datePeriod));
};
var _user$project$View$taskControl = F2(
	function (model, editor) {
		var actionLabel = _user$project$View$datePeriodLabel(editor.period);
		var buttonKind = editor.completed ? _rundis$elm_bootstrap$Bootstrap_Button$secondary : _rundis$elm_bootstrap$Bootstrap_Button$outlineInfo;
		var completedOn = function () {
			var _p2 = model.datePeriod;
			if (_p2.ctor === 'Yesterday') {
				return _elm_lang$core$Maybe$Just(model.context.yesterday);
			} else {
				return _elm_lang$core$Maybe$Just(model.context.today);
			}
		}();
		var completionButton = editor.completed ? A2(
			_rundis$elm_bootstrap$Bootstrap_Dropdown$buttonItem,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					A3(_user$project$StoryTask$updateCompletedOn, _user$project$Model$RequestTaskUpdate, _elm_lang$core$Maybe$Nothing, editor.task)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('fa fa-square-o'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' Uncomplete'),
					_1: {ctor: '[]'}
				}
			}) : A2(
			_rundis$elm_bootstrap$Bootstrap_Dropdown$buttonItem,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					A3(_user$project$StoryTask$updateCompletedOn, _user$project$Model$RequestTaskUpdate, completedOn, editor.task)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('fa fa-check-square-o'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' Complete'),
					_1: {ctor: '[]'}
				}
			});
		var actions = {
			ctor: '::',
			_0: completionButton,
			_1: {
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Dropdown$divider,
				_1: {
					ctor: '::',
					_0: A4(
						_user$project$View$actionButton,
						_elm_lang$core$Maybe$Just(model.context.yesterday),
						'Yesterday',
						actionLabel,
						editor.task),
					_1: {
						ctor: '::',
						_0: A4(
							_user$project$View$actionButton,
							_elm_lang$core$Maybe$Just(model.context.today),
							'Today',
							actionLabel,
							editor.task),
						_1: {
							ctor: '::',
							_0: A4(
								_user$project$View$actionButton,
								_elm_lang$core$Maybe$Just(model.context.tomorrow),
								'Tomorrow',
								actionLabel,
								editor.task),
							_1: {
								ctor: '::',
								_0: A4(_user$project$View$actionButton, _elm_lang$core$Maybe$Nothing, 'Later', actionLabel, editor.task),
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Dropdown$divider,
									_1: {
										ctor: '::',
										_0: A2(
											_rundis$elm_bootstrap$Bootstrap_Dropdown$buttonItem,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('text-danger'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(
														A2(_user$project$Model$ConfirmTaskDeletion, editor.task.id, editor.task.label)),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Delete'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		};
		var state = A2(
			_elm_lang$core$Maybe$withDefault,
			_rundis$elm_bootstrap$Bootstrap_Dropdown$initialState,
			A2(_elm_lang$core$Dict$get, editor.task.id, model.dropdownStates));
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Dropdown$dropdown,
			state,
			{
				options: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Dropdown$alignMenuRight,
					_1: {ctor: '[]'}
				},
				toggleMsg: _user$project$Model$DropdownMsg(editor.task.id),
				toggleButton: A2(
					_rundis$elm_bootstrap$Bootstrap_Dropdown$toggle,
					{
						ctor: '::',
						_0: buttonKind,
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('TaskControl'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(actionLabel),
						_1: {ctor: '[]'}
					}),
				items: actions
			});
	});
var _user$project$View$taskViewerView = F2(
	function (model, editor) {
		var completedExponent = function (task) {
			var _p3 = task.completedOn;
			if (_p3.ctor === 'Just') {
				return A2(
					_elm_lang$html$Html$sup,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('badge badge-default BadgeCompleted'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_user$project$Model$formatShortDate(_p3._0)),
						_1: {ctor: '[]'}
					});
			} else {
				return A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{ctor: '[]'});
			}
		};
		var startEditingMsg = A3(_user$project$Model$UpdateEditingTask, editor.task.id, true, editor.editingLabel);
		var label = editor.completed ? A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$s,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('text-muted'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(editor.task.label),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(' '),
							_1: {
								ctor: '::',
								_0: completedExponent(editor.task),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}) : (_elm_lang$core$Native_Utils.eq(editor.period, _user$project$Model$Yesterday) ? A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onDoubleClick(startEditingMsg),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(editor.task.label),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$i,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('fa fa-clock-o text-danger ml-2'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}) : A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onDoubleClick(startEditingMsg),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(editor.task.label),
				_1: {ctor: '[]'}
			}));
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('list-group-item d-flex flex-column align-items-start'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(' w-100 d-flex justify-content-between align-items-center'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: label,
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('d-flex justify-content-end'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('btn-group'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(_user$project$View$taskControl, model, editor),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$View$taskList = F2(
	function (model, taskEditors) {
		var view = function (editor) {
			return editor.editing ? _user$project$View$taskEditorView(editor) : A2(_user$project$View$taskViewerView, model, editor);
		};
		var tasksToShow = model.showCompleted ? taskEditors : A2(
			_elm_lang$core$List$filter,
			function (_p4) {
				return !function (_) {
					return _.completed;
				}(_p4);
			},
			taskEditors);
		return _elm_lang$core$List$isEmpty(tasksToShow) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('alert alert-info mt-3'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('No tasks found.'),
				_1: {ctor: '[]'}
			}) : A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('card'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('list-group list-group-flush'),
						_1: {ctor: '[]'}
					},
					A2(_elm_lang$core$List$map, view, tasksToShow)),
				_1: {ctor: '[]'}
			});
	});
var _user$project$View$taskSelectionTabs = function (model) {
	var tabPeriods = model.showYesterday ? {
		ctor: '::',
		_0: _user$project$Model$Yesterday,
		_1: {
			ctor: '::',
			_0: _user$project$Model$Today,
			_1: {
				ctor: '::',
				_0: _user$project$Model$Tomorrow,
				_1: {
					ctor: '::',
					_0: _user$project$Model$Later,
					_1: {ctor: '[]'}
				}
			}
		}
	} : {
		ctor: '::',
		_0: _user$project$Model$Today,
		_1: {
			ctor: '::',
			_0: _user$project$Model$Tomorrow,
			_1: {
				ctor: '::',
				_0: _user$project$Model$Later,
				_1: {ctor: '[]'}
			}
		}
	};
	var aTab = function (schedule) {
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('nav-item'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('nav-link'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'active',
										_1: _elm_lang$core$Native_Utils.eq(model.datePeriod, schedule)
									},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href('#'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$Model$ChangeDatePeriod(schedule)),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_user$project$View$datePeriodLabel(schedule)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('nav nav-tabs card-header-tabs'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, aTab, tabPeriods));
};
var _user$project$View$tasksCardView = function (model) {
	var selectedTasks = _user$project$Model$tasksForCurrentTaskPeriod(model);
	var notCompletedBeforeToday = function (task) {
		var _p5 = task.completedOn;
		if (_p5.ctor === 'Just') {
			return _elm_lang$core$Native_Utils.cmp(_p5._0, model.context.today) > -1;
		} else {
			return true;
		}
	};
	return _rundis$elm_bootstrap$Bootstrap_Card$view(
		A3(
			_rundis$elm_bootstrap$Bootstrap_Card$footer,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(_user$project$View$taskCompletionInfo, selectedTasks, model),
				_1: {ctor: '[]'}
			},
			A3(
				_rundis$elm_bootstrap$Bootstrap_Card$block,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Card$custom(
						A2(_user$project$View$taskList, model, selectedTasks)),
					_1: {ctor: '[]'}
				},
				A3(
					_rundis$elm_bootstrap$Bootstrap_Card$header,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _user$project$View$taskSelectionTabs(model),
						_1: {ctor: '[]'}
					},
					_rundis$elm_bootstrap$Bootstrap_Card$config(
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Card$attrs(
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('mt-3'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						})))));
};
var _user$project$View$newTaskForm = function (model) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Form$form,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onSubmit(_user$project$Model$AddCurrentTask),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Form$group,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Form$row,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Form$col,
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm10,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$large,
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_user$project$Model$UpdateCurrentTask),
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(model.currentTaskLabel),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$attrs(
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$placeholder('Enter new task...'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$autofocus(true),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Form$col,
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm2,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_rundis$elm_bootstrap$Bootstrap_Button$button,
											{
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$block,
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Button$large,
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$type_('submit'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$disabled(
																			_elm_lang$core$Native_Utils.eq(model.currentTaskLabel, '')),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Create'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$View$taskEditorsByDay = function (taskList) {
	var addOrAppend = F2(
		function (editor, found) {
			var _p6 = found;
			if (_p6.ctor === 'Just') {
				return _elm_lang$core$Maybe$Just(
					{ctor: '::', _0: editor, _1: _p6._0});
			} else {
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: editor,
						_1: {ctor: '[]'}
					});
			}
		});
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (editor, dict) {
				var _p7 = editor.task.scheduledOn;
				if (_p7.ctor === 'Just') {
					return A3(
						_elm_lang$core$Dict$update,
						_p7._0,
						addOrAppend(editor),
						dict);
				} else {
					return A3(
						_elm_lang$core$Dict$update,
						'Later',
						addOrAppend(editor),
						dict);
				}
			}),
		_elm_lang$core$Dict$empty,
		taskList);
};
var _user$project$View$summaryModal = function (model) {
	var summaryTaskView = function (editor) {
		return A2(
			_elm_lang$html$Html$li,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(editor.task.label),
				_1: {ctor: '[]'}
			});
	};
	var isScheduled = function (editor) {
		return (!editor.completed) && A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				function (date) {
					return _elm_lang$core$Native_Utils.cmp(date, model.context.today) < 1;
				},
				editor.task.scheduledOn));
	};
	var scheduledTasks = A2(_elm_lang$core$List$filter, isScheduled, model.taskEditors);
	var completedTasks = A2(
		_elm_lang$core$List$filter,
		function (_) {
			return _.completed;
		},
		model.taskEditors);
	var shortYesterday = _user$project$Model$formatShortDate(
		_user$project$Model$earliestYesterday(completedTasks));
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Modal$view,
		model.summaryModalState,
		A3(
			_rundis$elm_bootstrap$Bootstrap_Modal$footer,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Button$button,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_user$project$Model$HideSummary),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Done'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			A3(
				_rundis$elm_bootstrap$Bootstrap_Modal$body,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('mt-3 mb-4'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h6,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('text-center mb-3'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Yesterday'),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$small,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('ml-1 text-muted'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(
														_elm_lang$core$Basics_ops['++'],
														'(',
														A2(_elm_lang$core$Basics_ops['++'], shortYesterday, ')'))),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$ul,
									{ctor: '[]'},
									A2(_elm_lang$core$List$map, summaryTaskView, completedTasks)),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('mt-3 mb-4'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$h6,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('text-center mb-3'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Today'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$ul,
										{ctor: '[]'},
										A2(_elm_lang$core$List$map, summaryTaskView, scheduledTasks)),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				},
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$h4,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('w-100 text-center'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Scrum Summary'),
						_1: {ctor: '[]'}
					},
					_rundis$elm_bootstrap$Bootstrap_Modal$config(_user$project$Model$SummaryModalMsg)))));
};
var _user$project$View$confirmModal = function (model) {
	var cfg = model.confirmation;
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Modal$view,
		model.confirmModalState,
		A3(
			_rundis$elm_bootstrap$Bootstrap_Modal$footer,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Button$button,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$secondary,
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(cfg.msgCancel),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(cfg.labelCancel),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Button$button,
						{
							ctor: '::',
							_0: cfg.btnOk,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(cfg.msgOk),
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'min-width', _1: '100px'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(cfg.labelOk),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			A3(
				_rundis$elm_bootstrap$Bootstrap_Modal$body,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('lead'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(cfg.text),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$h4,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('w-100 -text-center'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(cfg.title),
						_1: {ctor: '[]'}
					},
					_rundis$elm_bootstrap$Bootstrap_Modal$config(_user$project$Model$ConfirmModalMsg)))));
};
var _user$project$View$orderingCard = function (model) {
	var taskEditorList = A2(
		_elm_lang$core$List$filter,
		function (_p8) {
			return !function (_) {
				return _.completed;
			}(_p8);
		},
		model.taskEditors);
	var taskItem = F2(
		function (isDropTarget, editor) {
			var attrs = _elm_lang$core$List$concat(
				{
					ctor: '::',
					_0: isDropTarget ? A2(_norpan$elm_html5_drag_drop$Html5_DragDrop$draggable, _user$project$Model$DragDropMsg, editor) : {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('UnselectableTask'),
						_1: {ctor: '[]'}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('justify-content-start'),
							_1: {ctor: '[]'}
						},
						_1: {ctor: '[]'}
					}
				});
			var _p9 = _user$project$View$datePeriodConfig(editor.period);
			var periodLabel = _p9._0;
			var periodBadge = _p9._1;
			return A2(
				_rundis$elm_bootstrap$Bootstrap_ListGroup$li,
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_ListGroup$attrs(attrs),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class(
								A2(_elm_lang$core$Basics_ops['++'], 'PeriodBadge badge mr-3 ', periodBadge)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(periodLabel),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(editor.task.label),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Badge$pill,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('ml-auto'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('fa fa-arrows SortHandle'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		});
	var hovered = function () {
		var _p10 = _norpan$elm_html5_drag_drop$Html5_DragDrop$getDropId(model.dragDrop);
		if (_p10.ctor === 'Just') {
			if (_p10._0.ctor === 'MoveTaskBefore') {
				return _elm_lang$core$Maybe$Just(_p10._0._0);
			} else {
				return _elm_lang$core$Maybe$Just(_p10._0._0);
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}();
	var dragged = _norpan$elm_html5_drag_drop$Html5_DragDrop$getDragId(model.dragDrop);
	var dropTargetAttrs = F2(
		function (request, editor) {
			return _elm_lang$core$Native_Utils.eq(
				_elm_lang$core$Maybe$Just(editor),
				dragged) ? {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('hidden-xs-up'),
				_1: {ctor: '[]'}
			} : _elm_lang$core$List$concat(
				{
					ctor: '::',
					_0: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('DropTarget align-items-center justify-content-between'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'DropTargetHighlight',
										_1: _elm_lang$core$Native_Utils.eq(
											hovered,
											_elm_lang$core$Maybe$Just(editor.task))
									},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					_1: {
						ctor: '::',
						_0: A2(_norpan$elm_html5_drag_drop$Html5_DragDrop$droppable, _user$project$Model$DragDropMsg, request),
						_1: {ctor: '[]'}
					}
				});
		});
	var dropTargetListForDay = function (_p11) {
		var _p12 = _p11;
		var taskReference = function (editor) {
			return _rundis$elm_bootstrap$Bootstrap_ListGroup$li;
		};
		var dropTarget = F2(
			function (request, editor) {
				return A2(
					_rundis$elm_bootstrap$Bootstrap_ListGroup$li,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_ListGroup$attrs(
							A2(dropTargetAttrs, request, editor)),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$i,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('fa fa-chevron-right'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('fa fa-chevron-right'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$i,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-chevron-right'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('fa fa-chevron-left'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$i,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-chevron-left'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$i,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('fa fa-chevron-left'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					});
			});
		var makeDropTargets = F2(
			function (before, editors) {
				return {
					ctor: '::',
					_0: A2(
						dropTarget,
						_user$project$Model$MoveTaskBefore(before.task),
						before),
					_1: A2(
						_elm_lang$core$List$concatMap,
						function (editor) {
							return {
								ctor: '::',
								_0: A2(taskItem, false, editor),
								_1: {
									ctor: '::',
									_0: A2(
										dropTarget,
										_user$project$Model$MoveTaskAfter(editor.task),
										editor),
									_1: {ctor: '[]'}
								}
							};
						},
						editors)
				};
			});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h6,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('text-muted'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(_p12._0),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_ListGroup$ul(
						function () {
							var _p13 = _elm_lang$core$List$reverse(_p12._1);
							if (_p13.ctor === '::') {
								var _p14 = _p13._0;
								return A2(
									makeDropTargets,
									_p14,
									{ctor: '::', _0: _p14, _1: _p13._1});
							} else {
								return {ctor: '[]'};
							}
						}()),
					_1: {ctor: '[]'}
				}
			});
	};
	var dropTargetList = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(
			_elm_lang$core$List$map,
			dropTargetListForDay,
			_elm_lang$core$Dict$toList(
				_user$project$View$taskEditorsByDay(taskEditorList))));
	return _rundis$elm_bootstrap$Bootstrap_Card$view(
		A3(
			_rundis$elm_bootstrap$Bootstrap_Card$footer,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('col pr-3 text-right'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Button$button,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_user$project$Model$HideOrdering),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Done'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			A3(
				_rundis$elm_bootstrap$Bootstrap_Card$block,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Card$custom(
						A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$h3,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Order Tasks'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('mt-2 mb-4'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Drag and drop tasks to re-order them.'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: function () {
											var _p15 = dragged;
											if (_p15.ctor === 'Just') {
												return dropTargetList;
											} else {
												return _rundis$elm_bootstrap$Bootstrap_ListGroup$ul(
													A2(
														_elm_lang$core$List$map,
														taskItem(true),
														taskEditorList));
											}
										}(),
										_1: {ctor: '[]'}
									}
								}
							})),
					_1: {ctor: '[]'}
				},
				_rundis$elm_bootstrap$Bootstrap_Card$config(
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Card$attrs(
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('mt-3'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}))));
};
var _user$project$View$taskCard = function (model) {
	return _rundis$elm_bootstrap$Bootstrap_Card$view(
		A3(
			_rundis$elm_bootstrap$Bootstrap_Card$block,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Card$custom(
					_user$project$View$newTaskForm(model)),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Card$custom(
						_user$project$View$tasksCardView(model)),
					_1: {ctor: '[]'}
				}
			},
			_rundis$elm_bootstrap$Bootstrap_Card$config(
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Card$attrs(
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('mt-3'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				})));
};
var _user$project$View$mainContent = function (model) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Grid$containerFluid,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('mt-3'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Grid$row,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Grid$col,
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm2,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h2,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('mb-3'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Tasker'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Grid$col,
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm8,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('w-100 align-top'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _user$project$View$messageView(model.message),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Grid$col,
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm2,
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Button$button,
												{
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$warning,
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_user$project$Model$ShowSummary),
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('pull-right'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$i,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('fa fa-calendar'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text(' Summary'),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: model.orderingMode ? _user$project$View$orderingCard(model) : _user$project$View$taskCard(model),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$View$menu = function (model) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Navbar$view,
		model.navState,
		A2(
			_rundis$elm_bootstrap$Bootstrap_Navbar$customItems,
			{
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Navbar$textItem,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('pull-right mr-3'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_user$project$Model$formatShortDate(model.context.today)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Navbar$customItem(
						A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('pull-right '),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Button$linkButton,
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href('/auth/logout'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Logout'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							})),
					_1: {ctor: '[]'}
				}
			},
			A3(
				_rundis$elm_bootstrap$Bootstrap_Navbar$brand,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href('/'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(model.config.name),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$small,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('pl-3'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'(',
										A2(_elm_lang$core$Basics_ops['++'], model.config.email, ')'))),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				_rundis$elm_bootstrap$Bootstrap_Navbar$primary(
					_rundis$elm_bootstrap$Bootstrap_Navbar$withAnimation(
						_rundis$elm_bootstrap$Bootstrap_Navbar$config(_user$project$Model$NavMsg))))));
};
var _user$project$View$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$View$menu(model),
			_1: {
				ctor: '::',
				_0: _user$project$View$mainContent(model),
				_1: {
					ctor: '::',
					_0: _user$project$View$summaryModal(model),
					_1: {
						ctor: '::',
						_0: _user$project$View$confirmModal(model),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
